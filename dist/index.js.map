{
  "version": 3,
  "sources": ["../lib/base.js", "../lib/dtrmv.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major' );\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @private\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @returns {Float64Array} `x`\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrmv( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float64Array>[ 14.0, 8.0, 3.0 ]\n*/\nfunction dtrmv( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ) { // eslint-disable-line max-params, max-len\n\tvar nonunit;\n\tvar isrm;\n\tvar tmp;\n\tvar sa0;\n\tvar sa1;\n\tvar ix0;\n\tvar ix1;\n\tvar i0;\n\tvar i1;\n\tvar oa;\n\tvar ox;\n\n\t// Note on variable naming convention: sa#, ix#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tisrm = isRowMajor( [ strideA1, strideA2 ] );\n\tnonunit = ( diag === 'non-unit' );\n\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tsa0 = strideA2; // stride for innermost loop\n\t\tsa1 = strideA1; // stride for outermost loop\n\t} else { // isColMajor\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tsa0 = strideA1; // stride for innermost loop\n\t\tsa1 = strideA2; // stride for outermost loop\n\t}\n\tox = offsetX;\n\n\tif (\n\t\t( !isrm && trans === 'no-transpose' && uplo === 'upper' ) ||\n\t\t( isrm && trans !== 'no-transpose' && uplo === 'lower' )\n\t) {\n\t\tix1 = ox;\n\t\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = x[ ix1 ];\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tfor ( i0 = 0; i0 < i1; i0++ ) {\n\t\t\t\t\tx[ ix0 ] += tmp * A[ oa+(sa0*i0) ];\n\t\t\t\t\tix0 += strideX;\n\t\t\t\t}\n\t\t\t\tif ( nonunit ) {\n\t\t\t\t\tx[ ix1 ] *= A[ oa+(sa0*i1) ];\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 += strideX;\n\t\t}\n\t\treturn x;\n\t}\n\tif (\n\t\t( !isrm && trans === 'no-transpose' && uplo === 'lower' ) ||\n\t\t( isrm && trans !== 'no-transpose' && uplo === 'upper' )\n\t) {\n\t\tox += ( N - 1 ) * strideX;\n\t\tix1 = ox;\n\t\tfor ( i1 = N-1; i1 >= 0; i1-- ) {\n\t\t\tif ( x[ ix1 ] !== 0.0 ) {\n\t\t\t\ttmp = x[ ix1 ];\n\t\t\t\toa = offsetA + (sa1*i1);\n\t\t\t\tix0 = ox;\n\t\t\t\tfor ( i0 = N-1; i0 > i1; i0-- ) {\n\t\t\t\t\tx[ ix0 ] += tmp * A[ oa+(sa0*i0) ];\n\t\t\t\t\tix0 -= strideX;\n\t\t\t\t}\n\t\t\t\tif ( nonunit ) {\n\t\t\t\t\tx[ ix1 ] *= A[ oa+(sa0*i1) ];\n\t\t\t\t}\n\t\t\t}\n\t\t\tix1 -= strideX;\n\t\t}\n\t\treturn x;\n\t}\n\tif (\n\t\t( !isrm && trans !== 'no-transpose' && uplo === 'upper' ) ||\n\t\t( isrm && trans === 'no-transpose' && uplo === 'lower' )\n\t) {\n\t\tix1 = ox + ( ( N - 1 ) * strideX );\n\t\tfor ( i1 = N-1; i1 >= 0; i1-- ) {\n\t\t\ttmp = x[ ix1 ];\n\t\t\toa = offsetA + (sa1*i1);\n\t\t\tix0 = ix1;\n\t\t\tif ( nonunit ) {\n\t\t\t\ttmp *= A[ oa+(sa0*i1) ];\n\t\t\t}\n\t\t\tfor ( i0 = i1-1; i0 >= 0; i0-- ) {\n\t\t\t\tix0 -= strideX;\n\t\t\t\ttmp += x[ ix0 ] * A[ oa+(sa0*i0) ];\n\t\t\t}\n\t\t\tx[ ix1 ] = tmp;\n\t\t\tix1 -= strideX;\n\t\t}\n\t\treturn x;\n\t}\n\t// ( !isrm && trans !== 'no-transpose' && uplo === 'lower' ) || ( isrm && trans === 'no-transpose' && uplo === 'upper' )\n\tix1 = ox;\n\tfor ( i1 = 0; i1 < N; i1++ ) {\n\t\ttmp = x[ ix1 ];\n\t\toa = offsetA + (sa1*i1);\n\t\tix0 = ix1;\n\t\tif ( nonunit ) {\n\t\t\ttmp *= A[ oa+(sa0*i1) ];\n\t\t}\n\t\tfor ( i0 = i1+1; i0 < N; i0++ ) {\n\t\t\tix0 += strideX;\n\t\t\ttmp += x[ ix0 ] * A[ oa+(sa0*i0) ];\n\t\t}\n\t\tx[ ix1 ] = tmp;\n\t\tix1 += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dtrmv;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar max = require( '@stdlib/math-base-special-fast-max' );\nvar isLayout = require( '@stdlib/blas-base-assert-is-layout' );\nvar isMatrixTriangle = require( '@stdlib/blas-base-assert-is-matrix-triangle' );\nvar isTransposeOperation = require( '@stdlib/blas-base-assert-is-transpose-operation' );\nvar isDiagonal = require( '@stdlib/blas-base-assert-is-diagonal-type' );\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar format = require( '@stdlib/string-format' );\nvar base = require( './base.js' );\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @param {string} order - storage layout\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @throws {TypeError} first argument must be a valid order\n* @throws {TypeError} second argument must specify whether a lower or upper triangular matrix is supplied\n* @throws {TypeError} third argument must be a valid transpose operation\n* @throws {TypeError} fourth argument must be a valid diagonal type\n* @throws {RangeError} fifth argument must be a nonnegative integer\n* @throws {RangeError} seventh argument must be greater than or equal to max(1,N)\n* @throws {RangeError} ninth argument must be non-zero\n* @returns {Float64Array} `x`\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrmv( 'row-major', 'upper', 'no-transpose', 'unit', 3, A, 3, x, 1 );\n* // x => <Float64Array>[ 14.0, 8.0, 3.0 ]\n*/\nfunction dtrmv( order, uplo, trans, diag, N, A, LDA, x, strideX ) {\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( !isTransposeOperation( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( !isDiagonal( diag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a valid diagonal type. Value: `%s`.', diag ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Seventh argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Ninth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 ) {\n\t\treturn x;\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\tox = stride2offset( N, strideX );\n\treturn base( uplo, trans, diag, N, A, sa1, sa2, 0, x, strideX, ox );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dtrmv;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isMatrixTriangle = require( '@stdlib/blas-base-assert-is-matrix-triangle' );\nvar isTransposeOperation = require( '@stdlib/blas-base-assert-is-transpose-operation' );\nvar isDiagonal = require( '@stdlib/blas-base-assert-is-diagonal-type' );\nvar format = require( '@stdlib/string-format' );\nvar base = require( './base.js' );\n\n\n// MAIN //\n\n/**\n* Performs one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix\n* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed\n* @param {string} diag - specifies whether `A` has a unit diagonal\n* @param {NonNegativeInteger} N - number of elements along each dimension of `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} x - input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @throws {TypeError} first argument must specify whether a lower or upper triangular matrix is supplied\n* @throws {TypeError} second argument must be a valid transpose operation\n* @throws {TypeError} third argument must be a valid diagonal type\n* @throws {RangeError} fourth argument must be a nonnegative integer\n* @throws {RangeError} tenth argument must be non-zero\n* @returns {Float64Array} `x`\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrmv( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float64Array>[ 14.0, 8.0, 3.0 ]\n*/\nfunction dtrmv( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ) { // eslint-disable-line max-params, max-len\n\tif ( !isMatrixTriangle( uplo ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );\n\t}\n\tif ( !isTransposeOperation( trans ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a valid transpose operation. Value: `%s`.', trans ) );\n\t}\n\tif ( !isDiagonal( diag ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a valid diagonal type. Value: `%s`.', diag ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Tenth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( N === 0 ) {\n\t\treturn x;\n\t}\n\treturn base( uplo, trans, diag, N, A, strideA1, strideA2, offsetA, x, strideX, offsetX ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = dtrmv;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar dtrmv = require( './dtrmv.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dtrmv, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dtrmv;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 2 routine to perform one of the matrix-vector operations `x = A*x` or `x = A^T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.\n*\n* @module @stdlib/blas-base-dtrmv\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dtrmv = require( '@stdlib/blas-base-dtrmv' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] );\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrmv( 'row-major', 'upper', 'no-transpose', 'unit', 3, A, 3, x, 1 );\n* // x => <Float64Array>[ 14.0, 8.0, 3.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dtrmv = require( '@stdlib/blas-base-dtrmv' );\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] );\n* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\n*\n* dtrmv.ndarray( 'upper', 'no-transpose', 'unit', 3, A, 3, 1, 0, x, 1, 0 );\n* // x => <Float64Array>[ 14.0, 8.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar dtrmv;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdtrmv = main;\n} else {\n\tdtrmv = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dtrmv;\n\n// exports: { \"ndarray\": \"dtrmv.ndarray\" }\n"],
  "mappings": "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",
  "names": ["require_base", "__commonJSMin", "exports", "module", "isRowMajor", "dtrmv", "uplo", "trans", "diag", "N", "A", "strideA1", "strideA2", "offsetA", "x", "strideX", "offsetX", "nonunit", "isrm", "tmp", "sa0", "sa1", "ix0", "ix1", "i0", "i1", "oa", "ox", "require_dtrmv", "__commonJSMin", "exports", "module", "max", "isLayout", "isMatrixTriangle", "isTransposeOperation", "isDiagonal", "stride2offset", "format", "base", "dtrmv", "order", "uplo", "trans", "diag", "N", "A", "LDA", "x", "strideX", "sa1", "sa2", "ox", "require_ndarray", "__commonJSMin", "exports", "module", "isMatrixTriangle", "isTransposeOperation", "isDiagonal", "format", "base", "dtrmv", "uplo", "trans", "diag", "N", "A", "strideA1", "strideA2", "offsetA", "x", "strideX", "offsetX", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "dtrmv", "ndarray", "join", "tryRequire", "isError", "main", "dtrmv", "tmp"]
}
